#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('onlineService:server');
var http = require('http');
var util = require('util');// 输出对象 util.inspect(s)
var Map = require('../mapTools');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Start IO server.
 */

var io = require('socket.io').listen(server);
var serviceUserArr = new Array(); // 客服数组
//var agentInfoArr = new Array();   // 用户数组

var serviceAgentMap = new Map();//记录多客服当前的用户列表

io.sockets.on('connection', ioConnection);

function ioConnection(socket) {
    console.log("进入 io.socket->connection 事件,有用户连接进来了!");

    /**
     * 客服登陆
     * 1,根据客服ID创建聊天室
     * @parameter 客服信息
     */
    socket.on('serviceLogin', function (data) {
        console.log("-------------------------------- 客服登陆 -----------------------------------");
        console.log("服务器:有客服登陆, id = " + data.serviceId + ", 昵称 = " + data.serviceNickName + ", 渠道 = " + data.channel);
        socket.join(data.serviceId);
        //缓存当前socket到队列
        socket.room = data.serviceId;
        socket.serviceId = data.serviceId;
        socket.serviceNickName = data.serviceNickName;
        socket.channel = data.channel;
        serviceUserArr.push(socket);
        //添加客服对应的用户列表到 serviceAgentMap
        var serviceAgentSocketArr = new Array();//空数组,备用
        serviceAgentMap.put(data.serviceId, serviceAgentSocketArr);
        console.log("更新客服队列完成--等待用户连接... 当前serviceUserArr.length = " + serviceUserArr.length);
        //返回登陆结果给客服端
        var agentInfo = {resCode: 0, serviceId: data.serviceId, serviceNickName: data.serviceNickName}
        socket.emit('serviceLoginResult', agentInfo);
    });

    /**
     * 分配客服方法
     * 1,判断当前在线的客服繁忙程度,分配会话
     * @returns 分配客服的socket实例
     */
    function assignService() {
        console.log("--------- 分配客服方法 ---------");
        //TODO 判断每次客服的繁忙程度 分配客服
        //循环全部在线的客服,并找到其会话下的用户列表,记录每个会话用户数量(OBJ) - 如果有空的就直接分配了 不需要再算最少
        var serviceSocket;
        var serviceId;
        var serviceAgentSocketArr;
        var agentNum;
        var agentNumMap = new Map();
        if (serviceUserArr && serviceUserArr.length > 0) {
            for (var i = 0; i < serviceUserArr.length; i++) {
                serviceSocket = serviceUserArr[i];//socket实例
                serviceId = serviceSocket.serviceId;//socketId
                serviceAgentSocketArr = getAgentSocketArr(serviceId);
                if (serviceAgentSocketArr != null) {
                    agentNum = serviceAgentSocketArr.length;
                    if (agentNum == 0) {//如果这个客服没有分配用户 直接分配给他
                        console.log("i = " + i + " 客服: " + serviceSocket.serviceNickName + " ,没有用户,直接分配给他了");
                        return serviceSocket;
                    } else {
                        console.log("i = " + i + " 客服: " + serviceSocket.serviceNickName + " ,有用户: " + agentNum + "个");
                        agentNumMap.put(serviceId, agentNum);
                    }
                } else {
                    return serviceSocket;
                }
            }
            console.log("当前共有在线客服: " + serviceUserArr.length + " 个,都处于繁忙状态,统计用户数Map创建完成");
            //所有客服都正在忙-分析谁最闲-(删除法最后取第一个即可)-得到其ServiceId
            //1,如果只有一个客服在线-只能给他了
            if (agentNumMap.size == 1) {
                serviceId = agentNumMap.element(0).serviceId;
                console.log('当前只有一个客服在线,只能给他了,他的serviceId是serviceId = ' + serviceId);
            }
            //根据ServiceId获取并返回serviceSocket实例
            serviceSocket = getServiceSocket(serviceId);
        } else {
            serviceSocket = false;
        }
        return serviceSocket;

        //var serviceSocket;
        //if (serviceUserArr.length > 0) {
        //    for (var i = 0; i < serviceUserArr.length; i++) {
        //        serviceSocket = serviceUserArr[i];
        //    }
        //} else {
        //    serviceSocket = false;
        //}
        //return serviceSocket;
    }

    /**
     * 获取当前会话的Socket实例
     * @returns 当前会话的Socket实例
     */
    function getServiceSocket(serviceId) {
        console.log("--------- 获取当前会话的Socket实例 ---------");
        //TODO 获取当前会话的socket（客服Socket）
        var serviceSocket;
        var serviceId_Temp;
        if (serviceUserArr != null && serviceUserArr.length > 0) {
            for (var i = 0; i < serviceUserArr.length; i++) {
                serviceSocket = serviceUserArr[i];
                serviceId_Temp = serviceSocket.serviceId;
                console.log("i = " + i + "匹配目标serviceId = " + serviceId + ', 当前serviceId_Temp = ' + serviceId_Temp);
                if (serviceId == serviceId_Temp) {
                    console.log('匹配到了 serviceId = ' + serviceId + " 的实例");
                    return serviceSocket;
                }
            }
            serviceSocket = false;
        } else {
            serviceSocket = false;
        }
        return serviceSocket;
    }

    /**
     * 用户登陆
     * 1,分配客服(检查有没有可用客服[有,没有,繁忙],有则分配)
     * 2,加入对应的客服聊天室
     * 3,更新客服下的用户数组
     * @parameter 用户信息
     */
    socket.on('agentLogin', function (data) {
        console.log("-------------------------------- 用户登录 -----------------------------------");
        console.log('服务器:有用户登陆, 用户id = ' + data.agentId + " , 昵称 = " + data.agentNickName + " , 渠道 = " + data.channel);

        //执行分配用户逻辑
        var serviceSocket = assignService();
        if (!serviceSocket) {
            console.log("当前没有客服在线");
            var loginResult = {resCode: 1, message: '当前没有客服在线'};
            socket.emit('agentLoginResult', loginResult);
            return;
        }

        //保存用户信息&socket实例
        socket.room = serviceSocket.room;
        socket.agentId = data.agentId;
        socket.agentNickName = data.agentNickName;
        socket.channel = data.channel;

        //加入分配客服的聊天室
        socket.join(serviceSocket.serviceId);
        console.log("用户 : " + data.agentId + " , 被分配到客服 " + serviceSocket.serviceNickName + " 的聊天室中");
        console.log("打印当前会话下用户数(包含一个客服) = " + io.sockets.adapter.rooms[serviceSocket.room].length);

        // 找到当前客服下的用户数组 getAgentSocketArr
        var agentSocketArr = getAgentSocketArr(serviceSocket.serviceId);
        console.log("客服:" + serviceSocket.serviceNickName + ",用户数组更新前 agentSocketArr = " + agentSocketArr.length);
        // 更新客服下的用户数组
        agentSocketArr.push(socket);
        console.log("客服:" + serviceSocket.serviceNickName + ",用户数组更新后 agentSocketArr = " + getAgentSocketArr(serviceSocket.serviceId).length);

        //返回用户登陆结果
        var serviceInfo = {
            resCode: 0,
            serviceId: serviceSocket.serviceId,
            serviceNickName: serviceSocket.serviceNickName
        }
        console.log("当前客服 serviceInfo.serviceId = " + serviceInfo.serviceId);
        console.log("当前客服 serviceInfo.serviceNickName = " + serviceInfo.serviceNickName);
        socket.emit('agentLoginResult', serviceInfo);

        //给用户所在客服发送添加用户消息
        serviceSocket.emit('assignUser', data);
    });

    /**
     * 根据客服Id获取获取该客服下用户数组(socket数组)
     * @param serviceId 检索条件:客服Id
     * @returns {*} 该客服下用户数组(socket数组)
     */
    function getAgentSocketArr(serviceId) {
        console.log("--------- 根据客服Id获取获取该客服下用户数组(socket数组) ---------");
        var agentSocketArr = serviceAgentMap.get(serviceId);
        return agentSocketArr;
    }

    /**
     * 根据用户Id获取用户实例
     * @param agentInfoArr 当前房间的用户列表
     * @param agentId      检索条件:用户Id
     * @returns {*} 指定Id的用户Socket实例
     */
    function getAgentSocket(agentInfoArr, agentId) {
        console.log("--------- 根据用户Id获取用户实例 ---------");
        var agentSocket;
        if (agentInfoArr.length > 0) {
            console.log("agentInfoArr.length = " + agentInfoArr.length);
            for (var i = 0; i < agentInfoArr.length; i++) {
                console.log("匹配agentId = " + agentId + ", 匹配项 = " + agentInfoArr[i].agentId);
                if (agentId == agentInfoArr[i].agentId) {
                    console.log("找到agentId实例");
                    agentSocket = agentInfoArr[i];
                } else {
                    console.log("未找到agentId实例");
                }
            }
            console.log("agentSocket.agentId = " + agentSocket.agentId);
            console.log("agentSocket.agentNickName = " + agentSocket.agentNickName);
        } else {
            agentSocket = false;
        }
        return agentSocket;
    }

    //收到客服端的默认回复
    socket.on('defRespondToAgent', function (data) {
        console.log("-------------------------------- 收到客服端的默认回复 -----------------------------------");
        console.log('收到客服端的默认回复, from = ' + data.from + " , to = " + data.to + " , 消息 = " + data.message);
        //找到这个用户的socket,并转发给这个用户
        var agentsocketArr = getAgentSocketArr(data.from);
        var agentSocket = getAgentSocket(agentsocketArr, data.to);
        agentSocket.emit('defRespondToAgent', data);
    });

    /**
     * 服务器收到用户消息,转发给客服
     */
    socket.on('agentToServiceMsg', function (data) {
        console.log("---------------------------- 服务器收到用户消息,转发给客服 -------------------------------");
        console.log('服务器收到用户发给客服的消息 data.from = ' + data.from + " , data.to = " + data.to + " , data.message = " + data.message);
        //将消息转发给客服端
        //TODO 根据to客服的id获取到客服Socket实例
        var serviceSocket = getServiceSocket(data.to);
        console.log("serviceSocket.serviceId = " + serviceSocket.serviceId);
        serviceSocket.emit('agentToServiceMsg', data);
    });

    /**
     * 服务器收到客服消息,转发给用户
     */
    socket.on('serviceToAgentMsg', function (data) {
        console.log("---------------------------- 服务器收到客服消息,转发给用户 -------------------------------");
        console.log('服务器收到客服发给用户的消息 data.from = ' + data.from + " , data.to = " + data.to + " , data.message = " + data.message);
        //将消息转发给用户端
        var agentsocketArr = getAgentSocketArr(data.from);
        var agentSocket = getAgentSocket(agentsocketArr, data.to);
        //判断用户还在不在
        if (!agentSocket) {
            console.log('用户已经离开');
            var error = {resCode: 1, message: '未找到该用户!'};
            //发送给客服，用户还在不在
            socket.emit('error', data);
        }
        agentSocket.emit('serviceToAgentMsg', data);
        //获得当前房间内的所有客户端(人)
        //console.log("-----打印当前socket.room = " + socket.room);
        //var clients = io.sockets.adapter.rooms[socket.room].length;
        //console.log("打印client对象 = " + clients);//JSON.stringify(clients)
        ////遍历找到该用户
        //clients.forEach(function(client){
        //  console.log("client in " + socket.room + " ==== " + client);
        //  if(client.username == data.to){
        //    //指定用户发消息 - 服务端接收来自用户端的消息 - 转发给客服
        //      client.emit('serviceReciver', data);
        //  }
        //});
    });

    /**
     * 用户登出
     * 1,用户退出,输出信息
     * @parameter 用户信息
     */
    socket.on('agentLogout', function (data) {
        console.log("---------------------------- 用户登出 -------------------------------");
        console.log('有客户退出 agentId = ' + data.agentId + ", agentNickName = " + data.agentNickName + ", serviceId = " + data.serviceId);
        //处理退出
        var agentSocketArr = getAgentSocketArr(data.serviceId);
        var agentSocket = getAgentSocket(agentSocketArr, data.agentId);
        agentSocket.leave(getServiceSocket(data.serviceId).room);
        //从数组移除
        console.log("移除用户socket前, 取一次看用户数 : " + getAgentSocketArr(data.serviceId).length);
        removeAgentSocket(agentSocketArr, data.agentId);
        console.log("移除该用户socket完成, 再取一次验证 : " + getAgentSocketArr(data.serviceId).length);
        //转发给客服端
        getServiceSocket(data.serviceId).emit('agentLogout', data);
    });

    /**
     * 将agent实例从当前会话的用户列表中移除
     * @param agentSocketArr 该会话下的用户socket数组
     */
    function removeAgentSocket(agentSocketArr, agentId){
        //从用户数组移除
        var agentSocketIndex = -1;
        for (var i = 0; i < agentSocketArr.length; i++) {
            if(agentSocketArr[i].agentId == agentId){
                agentSocketIndex = i;
                console.log("找到socket,数组下标为 " + agentSocketIndex + ", agentId = " + agentSocketArr[i].agentId);
                break;
            }
        }

        if(agentSocketIndex != -1){
            agentSocketArr.remove(agentSocketIndex);
            console.log("移除该用户socket完成");
        }else{
            console("未匹配到该用户的socket实例,删除失败");
        }
    }

    /*
     *  方法:Array.remove(dx) 通过遍历,重构数组
     *  功能:删除数组元素.
     *  参数:dx删除元素的下标.
     */
    Array.prototype.remove=function(dx){

        if(isNaN(dx)||dx>this.length){return false;}
        for(var i=0,n=0;i<this.length;i++)
        {
            if(this[i]!=this[dx])
            {
                this[n++]=this[i]
            }
        }
        this.length-=1

    }
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}





